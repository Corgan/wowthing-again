@model UserViewModel
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment HostEnv
@inject UriService UriService
@{
    ViewData["Title"] = Model.User.UserName;
}

@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@functions {
    private string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}

@section scripts
{
    @if (HostEnv.EnvironmentName == "Development")
    {
        <script type="module" src="http://localhost:55505/apps/home.ts"></script>
    }
    else
    {
        <script type="module" asp-src-include="~/dist/vendor.*js"></script>
        <script type="module" asp-src-include="~/dist/home.*js"></script>
    }

    @if (Model.Settings.General?.UseWowdb == true)
    {
        <script type="text/javascript" src="https://www.wowdb.com/current/js/syndication/tt.js" async></script>
    }
    else
    {
        <script>const wowhead_tooltips = { "hide": { "sellprice": true } }</script>
        <script type="text/javascript" src="https://wow.zamimg.com/widgets/power.js" async></script>
    }
}

<div id="app"
     data-base-uri="@UriService.BaseUri"
     data-modified="@Model.ModifiedJson"
     data-settings="@Model.SettingsJson"
     data-achievements="@Url.Action("CachedJson", "CachedJson", new { type = "achievement", languageCode = "zzZZ", hash = Model.AchievementHash })"
     data-appearance="@Url.Action("CachedJson", "CachedJson", new { type = "appearance", languageCode = "zzZZ", hash = Model.AppearanceHash })"
     data-item="@Url.Action("CachedJson", "CachedJson", new { type = "item", languageCode = "zzZZ", hash = Model.ItemHash })"
     data-journal="@Url.Action("CachedJson", "CachedJson", new { type = "journal", languageCode = "zzZZ", hash = Model.JournalHash })"
     data-manual="@Url.Action("CachedJson", "CachedJson", new { type = "manual", languageCode = "zzZZ", hash = Model.ManualHash })"
     data-static="@Url.Action("CachedJson", "CachedJson", new { type = "static", languageCode = "zzZZ", hash = Model.StaticHash })"
     data-user="@Url.Action("UserData", "Api", new { username = Model.User.UserName, access = Model.IsPrivate ? "private" : "public", modified="0" })"
     data-xsrf="@(User?.Identity?.IsAuthenticated == true ? GetAntiXsrfRequestToken() : "")"
></div>
