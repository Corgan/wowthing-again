// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Wowthing.Lib.Contexts;
using Wowthing.Lib.Models;

namespace Wowthing.Lib.Migrations
{
    [DbContext(typeof(WowDbContext))]
    partial class WowDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("asp_net_roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("asp_net_role_claims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("asp_net_user_claims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("asp_net_user_logins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("asp_net_user_roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("asp_net_user_tokens");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.ApplicationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<ApplicationUserSettings>("Settings")
                        .HasColumnType("jsonb")
                        .HasColumnName("settings");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("asp_net_users");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.PlayerAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Region")
                        .HasColumnType("integer")
                        .HasColumnName("region");

                    b.Property<string>("Tag")
                        .HasColumnType("text")
                        .HasColumnName("tag");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_player_account");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_player_account_user_id");

                    b.HasIndex("Region", "AccountId")
                        .IsUnique()
                        .HasDatabaseName("ix_player_account_region_account_id");

                    b.ToTable("player_account");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.PlayerCharacter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<int>("ActiveSpecId")
                        .HasColumnType("integer")
                        .HasColumnName("active_spec_id");

                    b.Property<int>("ActiveTitleId")
                        .HasColumnType("integer")
                        .HasColumnName("active_title_id");

                    b.Property<int>("AverageItemLevel")
                        .HasColumnType("integer")
                        .HasColumnName("average_item_level");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint")
                        .HasColumnName("character_id");

                    b.Property<int>("ClassId")
                        .HasColumnType("integer")
                        .HasColumnName("class_id");

                    b.Property<int>("DelayHours")
                        .HasColumnType("integer")
                        .HasColumnName("delay_hours");

                    b.Property<int>("EquippedItemLevel")
                        .HasColumnType("integer")
                        .HasColumnName("equipped_item_level");

                    b.Property<int>("Experience")
                        .HasColumnType("integer")
                        .HasColumnName("experience");

                    b.Property<int>("Faction")
                        .HasColumnType("integer")
                        .HasColumnName("faction");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guild_id");

                    b.Property<DateTime>("LastApiCheck")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_api_check");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("RaceId")
                        .HasColumnType("integer")
                        .HasColumnName("race_id");

                    b.Property<int>("RealmId")
                        .HasColumnType("integer")
                        .HasColumnName("realm_id");

                    b.HasKey("Id")
                        .HasName("pk_player_character");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_player_character_account_id");

                    b.HasIndex("RealmId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_player_character_realm_id_name");

                    b.ToTable("player_character");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.PlayerCharacterEquippedItem", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<int>("InventorySlot")
                        .HasColumnType("integer")
                        .HasColumnName("inventory_slot");

                    b.Property<List<int>>("BonusIds")
                        .HasColumnType("integer[]")
                        .HasColumnName("bonus_ids");

                    b.Property<int>("Context")
                        .HasColumnType("integer")
                        .HasColumnName("context");

                    b.Property<List<int>>("EnchantmentIds")
                        .HasColumnType("integer[]")
                        .HasColumnName("enchantment_ids");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    b.Property<int>("ItemLevel")
                        .HasColumnType("integer")
                        .HasColumnName("item_level");

                    b.Property<int>("Quality")
                        .HasColumnType("integer")
                        .HasColumnName("quality");

                    b.HasKey("CharacterId", "InventorySlot")
                        .HasName("pk_player_character_equipped_item");

                    b.ToTable("player_character_equipped_item");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.PlayerCharacterMythicPlus", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<int>("CurrentPeriodId")
                        .HasColumnType("integer")
                        .HasColumnName("current_period_id");

                    b.Property<List<PlayerCharacterMythicPlusRun>>("PeriodRuns")
                        .HasColumnType("jsonb")
                        .HasColumnName("period_runs");

                    b.HasKey("CharacterId")
                        .HasName("pk_player_character_mythic_plus");

                    b.ToTable("player_character_mythic_plus");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.PlayerCharacterMythicPlusSeason", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<int>("Season")
                        .HasColumnType("integer")
                        .HasColumnName("season");

                    b.Property<List<PlayerCharacterMythicPlusRun>>("Runs")
                        .HasColumnType("jsonb")
                        .HasColumnName("runs");

                    b.HasKey("CharacterId", "Season")
                        .HasName("pk_player_character_mythic_plus_season");

                    b.ToTable("player_character_mythic_plus_season");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.PlayerCharacterQuests", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<List<int>>("CompletedIds")
                        .HasColumnType("integer[]")
                        .HasColumnName("completed_ids");

                    b.HasKey("CharacterId")
                        .HasName("pk_player_character_quests");

                    b.ToTable("player_character_quests");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.PlayerCharacterRaiderIo", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<Dictionary<int, PlayerCharacterRaiderIoSeasonScores>>("Seasons")
                        .HasColumnType("jsonb")
                        .HasColumnName("seasons");

                    b.HasKey("CharacterId")
                        .HasName("pk_player_character_raider_io");

                    b.ToTable("player_character_raider_io");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.PlayerCharacterReputations", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<List<int>>("ReputationIds")
                        .HasColumnType("integer[]")
                        .HasColumnName("reputation_ids");

                    b.Property<List<int>>("ReputationValues")
                        .HasColumnType("integer[]")
                        .HasColumnName("reputation_values");

                    b.HasKey("CharacterId")
                        .HasName("pk_player_character_reputations");

                    b.ToTable("player_character_reputations");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.PlayerCharacterShadowlands", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<List<int>>("ConduitIds")
                        .HasColumnType("integer[]")
                        .HasColumnName("conduit_ids");

                    b.Property<List<int>>("ConduitRanks")
                        .HasColumnType("integer[]")
                        .HasColumnName("conduit_ranks");

                    b.Property<int>("CovenantId")
                        .HasColumnType("integer")
                        .HasColumnName("covenant_id");

                    b.Property<int>("RenownLevel")
                        .HasColumnType("integer")
                        .HasColumnName("renown_level");

                    b.Property<int>("SoulbindId")
                        .HasColumnType("integer")
                        .HasColumnName("soulbind_id");

                    b.HasKey("CharacterId")
                        .HasName("pk_player_character_shadowlands");

                    b.ToTable("player_character_shadowlands");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Query.SchedulerCharacterQuery", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<string>("CharacterName")
                        .HasColumnType("text")
                        .HasColumnName("character_name");

                    b.Property<string>("RealmSlug")
                        .HasColumnType("text")
                        .HasColumnName("realm_slug");

                    b.Property<int>("Region")
                        .HasColumnType("integer")
                        .HasColumnName("region");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.ToTable("scheduler_character_query");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("DefaultRealmId")
                        .HasColumnType("integer")
                        .HasColumnName("default_realm_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Region")
                        .HasColumnType("integer")
                        .HasColumnName("region");

                    b.Property<string>("Slug")
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_team");

                    b.HasIndex("Guid")
                        .IsUnique()
                        .HasDatabaseName("ix_team_guid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_team_user_id");

                    b.ToTable("team");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.TeamCharacter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<int>("PrimaryRole")
                        .HasColumnType("integer")
                        .HasColumnName("primary_role");

                    b.Property<int>("SecondaryRole")
                        .HasColumnType("integer")
                        .HasColumnName("secondary_role");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer")
                        .HasColumnName("team_id");

                    b.HasKey("Id")
                        .HasName("pk_team_character");

                    b.HasIndex("CharacterId")
                        .HasDatabaseName("ix_team_character_character_id");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("ix_team_character_team_id");

                    b.ToTable("team_character");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.WowClass", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Icon")
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<List<int>>("SpecializationIds")
                        .HasColumnType("integer[]")
                        .HasColumnName("specialization_ids");

                    b.HasKey("Id")
                        .HasName("pk_wow_class");

                    b.ToTable("wow_class");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.WowMythicPlusSeason", b =>
                {
                    b.Property<int>("Region")
                        .HasColumnType("integer")
                        .HasColumnName("region");

                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.HasKey("Region", "Id")
                        .HasName("pk_wow_mythic_plus_season");

                    b.ToTable("wow_mythic_plus_season");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.WowPeriod", b =>
                {
                    b.Property<int>("Region")
                        .HasColumnType("integer")
                        .HasColumnName("region");

                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<DateTime>("Ends")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("ends");

                    b.Property<DateTime>("Starts")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("starts");

                    b.HasKey("Region", "Id")
                        .HasName("pk_wow_period");

                    b.ToTable("wow_period");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.WowRace", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("IconFemale")
                        .HasColumnType("text")
                        .HasColumnName("icon_female");

                    b.Property<string>("IconMale")
                        .HasColumnType("text")
                        .HasColumnName("icon_male");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_wow_race");

                    b.ToTable("wow_race");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.WowRealm", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Region")
                        .HasColumnType("integer")
                        .HasColumnName("region");

                    b.Property<string>("Slug")
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.HasKey("Id")
                        .HasName("pk_wow_realm");

                    b.ToTable("wow_realm");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.WowReputation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("TierId")
                        .HasColumnType("integer")
                        .HasColumnName("tier_id");

                    b.HasKey("Id")
                        .HasName("pk_wow_reputation");

                    b.ToTable("wow_reputation");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.WowReputationTier", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int[]>("MaxValues")
                        .HasColumnType("integer[]")
                        .HasColumnName("max_values");

                    b.Property<int[]>("MinValues")
                        .HasColumnType("integer[]")
                        .HasColumnName("min_values");

                    b.Property<string[]>("Names")
                        .HasColumnType("text[]")
                        .HasColumnName("names");

                    b.HasKey("Id")
                        .HasName("pk_wow_reputation_tier");

                    b.ToTable("wow_reputation_tier");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.WowTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("TitleFemale")
                        .HasColumnType("text")
                        .HasColumnName("title_female");

                    b.Property<string>("TitleMale")
                        .HasColumnType("text")
                        .HasColumnName("title_male");

                    b.HasKey("Id")
                        .HasName("pk_wow_title");

                    b.ToTable("wow_title");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wowthing.Lib.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Wowthing.Lib.Models.PlayerAccount", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_player_account_application_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.PlayerCharacter", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.PlayerAccount", "Account")
                        .WithMany("Characters")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("fk_player_character_player_account_account_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.PlayerCharacterEquippedItem", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.PlayerCharacter", "Character")
                        .WithMany("EquippedItems")
                        .HasForeignKey("CharacterId")
                        .HasConstraintName("fk_player_character_equipped_item_player_character_character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.PlayerCharacterMythicPlus", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.PlayerCharacter", "Character")
                        .WithOne("MythicPlus")
                        .HasForeignKey("Wowthing.Lib.Models.PlayerCharacterMythicPlus", "CharacterId")
                        .HasConstraintName("fk_player_character_mythic_plus_player_character_character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.PlayerCharacterMythicPlusSeason", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.PlayerCharacter", "Character")
                        .WithMany("MythicPlusSeasons")
                        .HasForeignKey("CharacterId")
                        .HasConstraintName("fk_player_character_mythic_plus_season_player_character_charac")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.PlayerCharacterQuests", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.PlayerCharacter", "Character")
                        .WithOne("Quests")
                        .HasForeignKey("Wowthing.Lib.Models.PlayerCharacterQuests", "CharacterId")
                        .HasConstraintName("fk_player_character_quests_player_character_character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.PlayerCharacterRaiderIo", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.PlayerCharacter", "Character")
                        .WithOne("RaiderIo")
                        .HasForeignKey("Wowthing.Lib.Models.PlayerCharacterRaiderIo", "CharacterId")
                        .HasConstraintName("fk_player_character_raider_io_player_character_character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.PlayerCharacterReputations", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.PlayerCharacter", "Character")
                        .WithOne("Reputations")
                        .HasForeignKey("Wowthing.Lib.Models.PlayerCharacterReputations", "CharacterId")
                        .HasConstraintName("fk_player_character_reputations_player_character_character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.PlayerCharacterShadowlands", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.PlayerCharacter", "Character")
                        .WithOne("Shadowlands")
                        .HasForeignKey("Wowthing.Lib.Models.PlayerCharacterShadowlands", "CharacterId")
                        .HasConstraintName("fk_player_character_shadowlands_player_character_character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Team", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_team_application_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.TeamCharacter", b =>
                {
                    b.HasOne("Wowthing.Lib.Models.PlayerCharacter", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .HasConstraintName("fk_team_character_player_character_character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wowthing.Lib.Models.Team", "Team")
                        .WithMany("Characters")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("fk_team_character_team_team_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.PlayerAccount", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.PlayerCharacter", b =>
                {
                    b.Navigation("EquippedItems");

                    b.Navigation("MythicPlus");

                    b.Navigation("MythicPlusSeasons");

                    b.Navigation("Quests");

                    b.Navigation("RaiderIo");

                    b.Navigation("Reputations");

                    b.Navigation("Shadowlands");
                });

            modelBuilder.Entity("Wowthing.Lib.Models.Team", b =>
                {
                    b.Navigation("Characters");
                });
#pragma warning restore 612, 618
        }
    }
}
